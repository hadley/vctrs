% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/table.R
\name{tbl_is}
\alias{tbl_is}
\alias{tbl_assert}
\alias{tbl_size}
\alias{tbl_slice}
\alias{tbl_ptype}
\alias{tbl_ptype2}
\alias{tbl_ptype_common}
\alias{tbl_cast}
\title{Generics for tabular vectors}
\usage{
tbl_is(x)

tbl_assert(x, arg = as_label(substitute(x)))

tbl_size(x)

tbl_slice(x, i)

tbl_ptype(x)

tbl_ptype2(x, y, ..., x_arg = "x", y_arg = "y")

tbl_ptype_common(..., .ptype = NULL)

tbl_cast(x, to, ..., x_arg = "x", to_arg = "to")
}
\arguments{
\item{x}{A tabular vector.}

\item{arg}{Name of argument being checked. This is used in error
messages. The label of the expression passed as \code{x} is taken as
default.}

\item{i}{An integer, character or logical vector specifying the positions or
names of the observations to get/set.
Specify \code{TRUE} to index all elements (as in \code{x[]}), or \code{NULL}, \code{FALSE} or
\code{integer()} to index none (as in \code{x[NULL]}).}

\item{y}{Vector types.}

\item{...}{These dots are for future extensions and must be empty.}

\item{x_arg}{Argument names for \code{x} and \code{y}. These are used
in error messages to inform the user about the locations of
incompatible types (see \code{\link[=stop_incompatible_type]{stop_incompatible_type()}}).}

\item{y_arg}{Argument names for \code{x} and \code{y}. These are used
in error messages to inform the user about the locations of
incompatible types (see \code{\link[=stop_incompatible_type]{stop_incompatible_type()}}).}

\item{.ptype}{Prototype to compare against. If the prototype has a
class, its \code{\link[=vec_ptype]{vec_ptype()}} is compared to that of \code{x} with
\code{identical()}. Otherwise, its \code{\link[=typeof]{typeof()}} is compared to that of
\code{x} with \code{==}.}

\item{to}{Type to cast to. If \code{NULL}, \code{x} will be returned as is.}

\item{to_arg}{Argument names for \code{x} and \code{to}. These are used
in error messages to inform the user about the locations of
incompatible types (see \code{\link[=stop_incompatible_type]{stop_incompatible_type()}}).}
}
\description{
\Sexpr[results=rd, stage=render]{vctrs:::lifecycle("experimental")}

These generics make it possible to work with tables, i.e. vectors
of dimension 2 like data frames and matrices. The main motivation
of this API is to support colwise operations such as slicing
columns. Operating across columns requires slightly different
semantics and concepts than rowwise operations:
\itemize{
\item A tabular prototype is a zero-cols table. In order for your
tabular class to be compatible with vctrs, it needs to support
instances with zero columns without devolving to a base data
frame or throwing an error.
\item The row structure is part of tabular prototypes. For base data
frames, this includes the number of rows and the row names. This
is in contrast to vector prototypes which contain the column
structure but not the row structure.
\item The vector type of a data frame includes its columns (their names
and their types). The tabular type of a data frame doesn't. Hence
\code{tbl_ptype2()} and \code{tbl_cast()} accept inputs of any shape,
whereas \code{vec_ptype2()} and \code{vec_cast()} require congruent shapes
and names.
}

The details and theory of tabular operations are in development and
likely to change in the future.
}
