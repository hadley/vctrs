% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/complete.R
\name{df-complete}
\alias{df-complete}
\alias{df_slice_complete}
\alias{df_locate_complete}
\alias{df_detect_complete}
\title{Complete}
\usage{
df_slice_complete(x)

df_locate_complete(x)

df_detect_complete(x)
}
\arguments{
\item{x}{A data frame}
}
\value{
\itemize{
\item \code{df_slice_complete()}: A vector with the same type as \code{x}. The size
of the result is equal to the number of complete elements.
\item \code{df_locate_complete()}: An integer vector. The size
of the result is equal to the number of complete elements.
\item \code{df_detect_complete()}: A logical vector with the same size as \code{x}.
}
}
\description{
These functions are for working with "complete" rows of a data frame. A
row is only considered complete if all elements of that row are non-missing.
To compare, \code{!vec_equal_na(x)} detects rows that have at least one
non-missing value.
\itemize{
\item \code{df_slice_complete()} returns a vector with the same type as \code{x} holding
the complete elements.
\item \code{df_locate_complete()} returns a vector of locations corresponding to
the complete elements of \code{x}.
\item \code{df_detect_complete()} returns a logical vector that detects if elements
of \code{x} are complete.
}
}
\examples{
df <- data_frame(
  x = c(1, 2, NA, 4, NA),
  y = c("a", "b", NA, "d", "e")
)

# This returns `TRUE` where all elements of the row are non-missing.
# Compare that with `!vec_equal_na()`, which detects rows that have at
# least one non-missing value.
df2 <- df
df2$all_non_missing <- df_detect_complete(df)
df2$any_non_missing <- !vec_equal_na(df)
df2

# Extract only the complete rows with `df_slice_complete()`
df_slice_complete(df)
}
\seealso{
\code{\link[stats:complete.cases]{stats::complete.cases()}}
}
