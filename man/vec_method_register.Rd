% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/register-s3.R
\name{vec_method_register}
\alias{vec_method_register}
\title{Register a method for a suggested dependency}
\usage{
vec_method_register(generic, class, method = NULL)
}
\arguments{
\item{generic}{Name of the generic in the form \code{pkg::generic}.}

\item{class}{Name of the class}

\item{method}{Optionally, the implementation of the method. By default,
this will be found by looking for a function called \code{generic.class}
in the package environment.}
}
\description{
Generally, the recommend way to register an S3 method is to use the
\code{S3Method()} namespace directive (often generated automatically be the
\code{@export} roxygen2 tag). However, this technique requires that the generic
be in an imported package, and sometimes you want to suggest a package,
and only provide a method when that package is loaded. \code{vec_method_register()}
should be called from your package's \code{.onLoad()} to dynamically register
a method only if the generic's package is loaded.
}
\details{
\code{vec_method_register()} is also useful when demonstrating class creation
in a vignette, since as of R 3.5.0, method lookup no longer always involves
the lexical scope.

As of R 3.6.0, a similar effect can be accomplished by using "delayed method
registration", by placing the following in your \code{NAMESPACE} file:\preformatted{if (getRversion() >= "3.6.0") {
  S3method(package::generic, class)
}
}
}
\examples{
# A typical use case is to dynamically register tibble/pillar methods
# for your class. That way you avoid creating a hard depedency on packages
# that are not essential, while still providing finer control over
# printing when they are used.

.onLoad <- function(...) {
  vec_method_register("pillar::pillar_shaft", "vctrs_vctr")
  vec_method_register("tibble::type_sum", "vctrs_vctr")
}
}
\keyword{internal}
