% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/dictionary.R, R/equal.R
\name{vec_duplicate}
\alias{vec_duplicate}
\alias{vec_duplicate_any}
\alias{vec_duplicate_flg}
\alias{vec_duplicate_loc}
\alias{vec_duplicate_all}
\title{Find duplicated values}
\usage{
vec_duplicate_any(x)

vec_duplicate_flg(x, first = FALSE)

vec_duplicate_loc(x, first = FALSE)

vec_duplicate_all(x)
}
\arguments{
\item{x}{A vector (including a data frame).}

\item{first}{A logical indicating if the first occurrence of a value should
be considered a duplicate.}
}
\value{
\itemize{
\item \code{vec_duplicate_any()}: a logical vector of length 1.
\item \code{vec_duplicate_all()}: a logical vector of length 1.
\item \code{vec_duplicate_flg()}: a logical vector the same size as \code{x}.
\item \code{vec_duplicate_loc()}: an integer vector of the locations of the
duplicates of each value.
}
}
\description{
\itemize{
\item \code{vec_duplicate_any()}: detects the presence of duplicated values,
similar to \code{\link[=anyDuplicated]{anyDuplicated()}}.
\item \code{vec_duplicate_all()}: detects if all values are equivalent.
\item \code{vec_duplicate_flg()}: returns a vector of logical flags describing if each
element of the vector is a duplicate.
\item \code{vec_duplicate_loc()}: returns an integer vector giving the location of
the duplicates of each value.
}
}
\section{Missing values}{

In most cases, missing values are not considered to be equal, i.e.
\code{NA == NA} is not \code{TRUE}. This behaviour would be unappealing here,
so these functions consider all \code{NAs} to be equal. (Similarly,
all \code{NaN} are also considered to be equal.)
}

\examples{
vec_duplicate_any(1:10)
vec_duplicate_any(c(1, 1:10))

vec_duplicate_all(c(1, 1))
vec_duplicate_all(c(1, 2))
vec_duplicate_all(c(NA, NA))

x <- c(10, 10, 20, 30, 30, 40)

# The default of `vec_duplicate_flg()` is similar to `duplicated()`. Both
# don't consider the first occurrence to be a duplicate.
vec_duplicate_flg(x)
duplicated(x)

# Use `first` to control whether or not the first occurrence should be
# considered a duplicate
vec_duplicate_flg(x, first = TRUE)

# `vec_duplicate_loc()` returns the locations corresponding to
# the flags that `vec_duplicate_flg()` returns
vec_duplicate_loc(x)
which(vec_duplicate_flg(x))

# When `first = FALSE`, it can be considered the
# complement of `vec_unique_loc()`
vec_unique_loc(x)
}
\seealso{
\code{\link[=vec_unique]{vec_unique()}} for functions that work with the dual of duplicated
values: unique values.
}
