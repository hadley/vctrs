
can override arg in OOB conditions
==================================

> with_subscript_data(vec_slice(set_names(letters), "foo"), NULL)
Error: Can't subset elements that don't exist.
x The element `foo` doesn't exist.

> with_subscript_data(vec_slice(set_names(letters), "foo"), "input")
Error: Can't subset elements that don't exist.
x The element `foo` doesn't exist.

> with_subscript_data(vec_slice(set_names(letters), "foo"), quote(input))
Error: Can't subset elements that don't exist.
x The element `foo` doesn't exist.

> with_subscript_data(vec_slice(set_names(letters), "foo"), quote(input[i]))
Error: Can't subset elements that don't exist.
x The element `foo` doesn't exist.


scalar type errors are informative
==================================

> vec_slice(foobar(list(1)), 1)
Error: Input must be a vector, not a `vctrs_foobar` object.

> stop_scalar_type(foobar(list(1)), arg = "foo")
Error: `foo` must be a vector, not a `vctrs_foobar` object.


empty names errors are informative
==================================

> vec_as_names(c("x", "", "y"), repair = "check_unique")
Error: Names must not be empty.
Empty name found at location 2.

> vec_as_names(c("x", "", "y", ""), repair = "check_unique")
Error: Names must not be empty.
Empty names found at locations 2 and 4.

> vec_as_names(rep("", 10), repair = "check_unique")
Error: Names must not be empty.
Empty names found at locations 1, 2, 3, 4, 5, etc.


dot dot names errors are informative
====================================

> vec_as_names(c("..1", "..1", "..1", "...", "...", "z"), repair = "check_unique")
Error: Names must not be of the form `...` or `..j`.
* "..1" (1, 2, and 3)
* "..." (4 and 5)

> vec_as_names(c(rep("..1", 20), rep(c("..2", "..3", "..4", "...", "..5"), 2)),
+ repair = "check_unique")
Error: Names must not be of the form `...` or `..j`.
* "..1" (1, 2, 3, 4, 5, etc.)
* "..2" (21 and 26)
* "..3" (22 and 27)
* "..4" (23 and 28)
* "..." (24 and 29)
* ...


unique names errors are informative
===================================

> vec_as_names(c("x", "x", "x", "y", "y", "z"), repair = "check_unique")
Error: Names must be unique. Repeated names:
* "x" (1, 2, and 3)
* "y" (4 and 5)

> vec_as_names(c(rep("x", 20), rep(c("a", "b", "c", "d", "e"), 2)), repair = "check_unique")
Error: Names must be unique. Repeated names:
* "x" (1, 2, 3, 4, 5, etc.)
* "a" (21 and 26)
* "b" (22 and 27)
* "c" (23 and 28)
* "d" (24 and 29)
* ...

